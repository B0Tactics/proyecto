package edu.eci.arsw.controller;

import java.util.logging.Level;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import edu.eci.arsw.model.User;
import edu.eci.arsw.repository.UserRepository;
import java.util.ArrayList;

@Controller    // This means that this class is a Controller
@RequestMapping(value = "/users") // This means URL's start with /demo (after Application path)
public class MainController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser(@RequestParam String name,
             @RequestParam String email, @RequestParam String user1, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setUser(user1);
        n.setPassword(password);
        userRepository.save(n);
        return "Saved";
    }

    @RequestMapping(path = "/{name}/{puntaje}",method = RequestMethod.PUT)
    public @ResponseBody
    String addNewScore(@PathVariable("name") String UserName, @PathVariable("puntaje")Integer puntaje ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User n = null;
        for (User user : userRepository.findAll()) {
            if (user.getName().equals(UserName)) {
                n = user;
                userRepository.delete(n);
            }
        }
        //System.out.println(n.getName());
        if (n.getPuntajes()==null){
            ArrayList<Integer> newp =new ArrayList<Integer>();
            n.setPuntajes(newp);
        }
        n.addPuntaje(puntaje);
        userRepository.save(n);
        return "Created";
    }

    @RequestMapping(path = "/{name}/{email}/{user}/{password}", method = RequestMethod.PUT)
    public ResponseEntity<?> PutBlueprint(@PathVariable("name") String name, @PathVariable("email") String email,
            @PathVariable("user") String user1, @PathVariable("password") String password, @RequestBody User newU) {

        try {
            User n = new User();
            n.setName(name);
            n.setEmail(email);
            n.setUser(user1);
            n.setPassword(password);
            userRepository.save(n);
            return new ResponseEntity<>(HttpStatus.CREATED);
        } catch (Exception ex) {
            Logger.getLogger(MainController.class.getName()).log(Level.SEVERE, null, ex);
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.FORBIDDEN);
        }
    }

    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity<?> GetAllBlueprintFilter() {
        try {
            return new ResponseEntity<>(userRepository.findAll(), HttpStatus.ACCEPTED);
        } catch (Exception e) {
            Logger.getLogger(MainController.class.getName()).log(Level.SEVERE, null, e);
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    @RequestMapping(path = "/{name}", method = RequestMethod.GET)
    public ResponseEntity<?> GetUserByname(@PathVariable("name") String userName) {
        try {
            User n = null;
            for (User user : userRepository.findAll()) {
                if (user.getName().equals(userName)) {
                    n = user;
                }
            }
            return new ResponseEntity<>(n, HttpStatus.ACCEPTED);
        } catch (Exception e) {
            Logger.getLogger(MainController.class.getName()).log(Level.SEVERE, null, e);
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

}
